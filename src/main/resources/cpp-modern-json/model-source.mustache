{{#models}}{{#model}}#include "{{classname}}.h"

#include "serialization.h"
#include "utility.h"

{{#modelNamespaceDeclarations}}
namespace {{this}} {
{{/modelNamespaceDeclarations}}

{{^discriminator}}
void {{classname}}::from_json(const ::nlohmann::json& j, {{classname}}& obj) {
{{#requiredVars}}    j.at("{{baseName}}").get_to(obj.{{baseName}});
{{/requiredVars}}
{{#optionalVars}}    detail::to_optional(j, "{{baseName}}", obj.{{baseName}});
{{/optionalVars}}
}
{{/discriminator}}
{{#discriminator}}
void {{classname}}::from_json(const json& j, {{classname}}::Alternative& obj) {
    const auto discriminator = j.at("{{propertyBaseName}}").get<{{classname}}::{{propertyName}}>();
    switch (discriminator) {
        {{#mappedModels}}
        case {{classname}}::{{propertyName}}::{{mappingName}}:
            obj = j.get<{{modelName}}>();
            return;
        {{/mappedModels}}
    }
    UNREACHABLE_CODE
}
{{/discriminator}}

void {{classname}}::to_json(::nlohmann::json& j, const {{classname}}& obj) {
    j = ::nlohmann::json{
{{#vars}}        {"{{baseName}}", obj.{{baseName}}},
{{/vars}}
    };
}

{{#hasEnums}}{{#vars}}{{#isEnum}}
// ---- enum conversion methods ----

std::string {{classname}}::to_string({{classname}}::{{enumName}} value) {
    switch (value) {
{{#allowableValues}}
{{#enumVars}}
        case {{classname}}::{{enumName}}::{{name}}:
            return "{{name}}";
{{/enumVars}}
{{/allowableValues}}
    }
    UNREACHABLE_CODE
}

void {{classname}}::to_json(::nlohmann::json& j, const {{classname}}::{{enumName}}& value) {
    j = {{classname}}::to_string(value);
}

void {{classname}}::from_json(const ::nlohmann::json& j, {{classname}}::{{enumName}}& value) {
    auto str = j.get_ref<const ::nlohmann::json::string_t&>();
{{#allowableValues}}
{{#enumVars}}
    {{^-first}}} else {{/-first}}if (str == "{{name}}") {
        value = {{classname}}::{{enumName}}::{{name}};
{{/enumVars}}
{{/allowableValues}}
    } else {
        throw invalid_enum_value(str);
    }
}

{{/isEnum}}
{{/vars}}
{{/hasEnums}}
{{#modelNamespaceDeclarations}}
}
{{/modelNamespaceDeclarations}}
{{/model}}
{{/models}}
