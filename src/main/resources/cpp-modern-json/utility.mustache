#ifndef {{modelHeaderGuardPrefix}}__UTILITY_H_
#define {{modelHeaderGuardPrefix}}__UTILITY_H_

#include <stdexcept>

#include <nlohmann/json.hpp>

// This macro is used to improve warning behavior across compilers for switch
// statements on enums. It allows us to NOT define a default case, so the
// compiler can warn us about unhandled enum codes, without the compiler
// worrying we might reach the end of a non-void function without returning
// (GCC: -Wreturn-type).
#ifdef __clang__
#define UNREACHABLE_CODE __builtin_unreachable();
#elif __GNUC__
#define UNREACHABLE_CODE __builtin_unreachable();
#elif _MSC_VER
#define UNREACHABLE_CODE __assume(0);
#endif

{{#modelNamespaceDeclarations}}
namespace {{this}} {
{{/modelNamespaceDeclarations}}

class invalid_enum_value : public std::runtime_error {
    public:
        using std::runtime_error::runtime_error;
};

// TODO: document
// TODO: is here a good place for this?
template <typename T, typename = void>
struct has_discriminator : std::false_type {};

// TODO: Find another way to implement this -- discriminator_value is unused
//       and should be removed. Can we check for `has_Alternative_typedef`?
template <typename T>
struct has_discriminator<
    T, std::enable_if_t<std::is_invocable_v<
           decltype(&T::discriminator_value), json const&>>>
    : std::true_type {}

namespace detail {

// Helper methods to convert json values to object member types. A
// specialization for nlohmann::json exists because get_to() cannot be used for
// these.

template <typename T>
void to_required(const nlohmann::json& j, const char* key, T& target) {
    j.at(key).get_to(target);
}

template <typename T>
void to_optional(const nlohmann::json& j, const char* key, T& target) {
    if (j.contains(key)) {
        j.at(key).get_to(target);
    } else {
        target = std::nullopt;
    }
}

template <>
inline void to_required(const nlohmann::json& j, const char* key,
                        nlohmann::json& target) {
    target = j.at(key);
}

template <>
inline void to_optional(const nlohmann::json& j, const char* key,
                 std::optional<nlohmann::json>& target) {
    if (j.contains(key)) {
        target = j.at(key);
    } else {
        target = std::nullopt;
    }
}

}

{{#modelNamespaceDeclarations}}
}
{{/modelNamespaceDeclarations}}

#endif // {{modelHeaderGuardPrefix}}__UTILITY_H_
