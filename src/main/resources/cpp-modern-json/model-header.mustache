{{#models}}{{#model}}#ifndef {{modelHeaderGuardPrefix}}_{{classname}}_H_
#define {{modelHeaderGuardPrefix}}_{{classname}}_H_

#include <nlohmann/json.hpp>

{{#hasOptional}}#include <optional>
{{/hasOptional}}
{{#discriminator}}#include <variant>
{{/discriminator}}

{{#imports}}{{{this}}}
{{/imports}}

{{! ---------------------------------------------------------------------- }}
{{! the model struct                                                       }}
{{! ---------------------------------------------------------------------- }}

{{#modelNamespaceDeclarations}}
namespace {{this}} {
{{/modelNamespaceDeclarations}}

{{#description}}/**
 * \brief {{description}}
{{#example}} *
 * Example: {{example}}
{{/example}}
 */
{{/description}}
struct {{classname}} {
{{^discriminator}}
    static void from_json(const ::nlohmann::json& j, {{classname}}& obj);
{{/discriminator}}
{{#discriminator}}
    /** {{classname}} is an abstract type. It's concrete types are
     *  {{#mappedModels}}{{modelName}}{{^-last}}, {{/-last}}{{/mappedModels}}.
     *
     *  TODO: explain detailed usage; refer to `has_discriminator<>` and `discriminator_value()`
     */
    using Alternative = std::variant<{{#mappedModels}}{{modelName}}{{^-last}}, {{/-last}}{{/mappedModels}}>;

    // TODO: This method is no longer used. The one line that was it's implementation is now
    //       part of `from_json( ... , Alternative&)`
    //       Remove this method and implement `has_discriminator` in some other way.
    static {{propertyName}} discriminator_value(const ::nlohmann::json& j);

    static void from_json(const ::nlohmann::json& j, Alternative& obj);
{{/discriminator}}
    static void to_json(::nlohmann::json& j, const {{classname}}& obj);

{{#hasEnums}}    // enums
{{#vars}}{{#isEnum}}{{#description}}    /**
     * \brief {{description}}
     */
{{/description}}
    enum class {{enumName}} {
{{#allowableValues}}{{#enumVars}}        {{name}},
{{/enumVars}}{{/allowableValues}}    };

    static std::string to_string({{enumName}} value);
    static void to_json(::nlohmann::json& j, const {{enumName}}& value);
    static void from_json(const ::nlohmann::json& j, {{enumName}}& value);

{{/isEnum}}
{{/vars}}
{{/hasEnums}}

{{#hasRequired}}    // required fields
{{#requiredVars}}    {{{datatypeWithEnum}}} {{baseName}};
{{/requiredVars}}
{{/hasRequired}}

{{#hasOptional}}    // optional fields
{{#optionalVars}}    std::optional<{{{datatypeWithEnum}}}> {{baseName}};
{{/optionalVars}}
{{/hasOptional}}
};

{{! ---------------------------------------------------------------------- }}
{{! to_string methods for enum fields                                      }}
{{! ---------------------------------------------------------------------- }}

{{#hasEnums}}
{{#vars}}
{{#isEnum}}
inline std::string to_string({{classname}}::{{enumName}} value) {
    return {{classname}}::to_string(value);
}

{{/isEnum}}
{{/vars}}
{{/hasEnums}}

{{! ---------------------------------------------------------------------- }}
{{! adl_serializer specializations for enums in this model                 }}
{{! ---------------------------------------------------------------------- }}

{{#hasEnums}}
{{#modelNamespaceDeclarations}}
}
{{/modelNamespaceDeclarations}}

{{! adl_serializer specializations need to live in nlohmann namespace }}
namespace nlohmann {

{{#vars}}
{{#isEnum}}
template<>
struct adl_serializer<{{modelNamespace}}::{{classname}}::{{enumName}}> {
    static void to_json(json& j, const {{modelNamespace}}::{{classname}}::{{enumName}}& value) {
        {{modelNamespace}}::{{classname}}::to_json(j, value);
    }
    static void from_json(const json& j, {{modelNamespace}}::{{classname}}::{{enumName}}& value) {
        {{modelNamespace}}::{{classname}}::from_json(j, value);
    }
};

{{/isEnum}}
{{/vars}}
}

{{! to_ and from_json need to live in the model namespace }}
{{! define them after the adl_serializer specialization they will use, though }}
{{#modelNamespaceDeclarations}}
namespace {{this}} {
{{/modelNamespaceDeclarations}}

{{/hasEnums}}

{{! ---------------------------------------------------------------------- }}
{{! to_json and from_json for all fields in this model                     }}
{{! ---------------------------------------------------------------------- }}

inline void to_json(nlohmann::json& j, const {{classname}}& obj) {
    {{classname}}::to_json(j, obj);
}

inline void from_json(const nlohmann::json& j, {{classname}}& obj) {
    {{classname}}::from_json(j, obj);
}

{{#modelNamespaceDeclarations}}
}
{{/modelNamespaceDeclarations}}


#endif /* {{modelHeaderGuardPrefix}}_{{classname}}_H_ */
{{/model}}
{{/models}}
